// main.ts
import { serve } from "https://deno.land/std@0.224.0/http/server.ts";

const TOKEN = Deno.env.get("BOT_TOKEN")!;
const TELEGRAM_API = `https://api.telegram.org/bot${TOKEN}`;
const SECRET_PATH = "/tkmracehelper"; // –ø—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (–≤ –ø–∞–º—è—Ç–∏)
const warnings = new Map<number, number>();

// username ‚Üí userId (–±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∏—Å–∫–∞—Ç—å)
const usernames = new Map<string, number>();

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendMessage(chatId: number, text: string) {
  await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, text }),
  });
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
async function deleteMessage(chatId: number, messageId: number) {
  await fetch(`${TELEGRAM_API}/deleteMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, message_id: messageId }),
  });
}

// –ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)
async function muteUser(chatId: number, userId: number) {
  await fetch(`${TELEGRAM_API}/restrictChatMember`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      user_id: userId,
      permissions: {
        can_send_messages: false,
        can_send_media_messages: false,
        can_send_other_messages: false,
        can_add_web_page_previews: false,
      },
    }),
  });
}

// –†–∞–∑–º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function unmuteUser(chatId: number, userId: number) {
  await fetch(`${TELEGRAM_API}/restrictChatMember`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      user_id: userId,
      permissions: {
        can_send_messages: true,
        can_send_media_messages: true,
        can_send_other_messages: true,
        can_add_web_page_previews: true,
      },
    }),
  });
}

serve(async (req: Request) => {
  if (new URL(req.url).pathname !== SECRET_PATH) {
    return new Response("Not Found", { status: 404 });
  }

  const update = await req.json();

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  if (update.message?.new_chat_member) {
    const user = update.message.new_chat_member;
    const chatId = update.message.chat.id;

    if (user.username) {
      usernames.set(user.username.toLowerCase(), user.id);
    }

    await sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.first_name}! üéâ`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  if (update.message?.text) {
    const chatId = update.message.chat.id;
    const userId = update.message.from.id;
    const userName = update.message.from.first_name;
    const userUsername = update.message.from.username?.toLowerCase();
    const messageId = update.message.message_id;
    const text = update.message.text;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º username ‚Üí userId
    if (userUsername) {
      usernames.set(userUsername, userId);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É unmute
    if (text.includes("unmute")) {
      const match = text.match(/@([a-zA-Z0-9_]+)/);
      if (match) {
        const targetUsername = match[1].toLowerCase();
        const targetId = usernames.get(targetUsername);

        if (targetId) {
          await unmuteUser(chatId, targetId);
          warnings.delete(targetId);
          await sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${targetUsername} —Ä–∞–∑–º—É—á–µ–Ω –∏ –µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–±–Ω—É–ª–µ–Ω—ã.`);
        } else {
          await sendMessage(chatId, `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${targetUsername}.`);
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å—Å—ã–ª–∫–∏ (—Å–ø–∞–º)
    const linkRegex = /(https?:\/\/[^\s]+)/gi;
    if (linkRegex.test(text)) {
      await deleteMessage(chatId, messageId);

      let count = warnings.get(userId) || 0;
      count++;
      warnings.set(userId, count);

      if (count < 4) {
        await sendMessage(chatId, `‚ö†Ô∏è ${userName}, —ç—Ç–æ —Å–ø–∞–º! –£ –≤–∞—Å ${count}/3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.`);
      } else {
        await sendMessage(chatId, `ü§ê ${userName} –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (–º—É—Ç –∑–∞ —Å–ø–∞–º).`);
        await muteUser(chatId, userId);
        warnings.delete(userId);
      }
    }
  }

  return new Response("ok");
});

